// 기존 문자열 할당은 아래와 같이 진행한다.
var 문자1 = "기존 문자열 할당 방법";
// es6 부터는 백틱을 사용해서 문자열을 할당할 수 있다.
var 문자2 = `새로운 문자열 할당 방법`;

// 새로운 문자열 할당 방법을 사용하는 이유
// 1. 엔터키 가능
// 2. 중간에 변수 넣기가 쉽다

// 1. 엔터키 가능
var 문자열_엔터키 = `아무렇게나

엔터키를 넣어도

문자열
할당이 
가능하다.`;

// 2. 중간에 변수 넣기가 쉽다
var 나이 = 30;
var 문자3 = `내 나이는 ${나이}살이다.`;
console.log(문자3);

// tagged literals
// 함수로 문자 해체 분석 기능을 만들 수 있다.
// 문자 중간 중간에 있는 단어 순서를 바꾸거나 변수를 제거하거나 할 때 유용하다.

var 이름 = "김이박";

function 해체분석기() {
    return 10;
}

해체분석기`안녕하세요 ${이름} 입니다`;
// 맨 마지막 줄에서 함수를 실행시킬 때 소괄호가 아니라 문자를 이용해서 함수를 실행시킬 수 있다.
// 실행할 함수이름을 쓰고 소괄호 대신 백틱 문자를 붙여주면 된다.
// 이러면 함수가 실행된다.
console.log(해체분석기`안녕하세요 ${이름} 입니다`);
// 이걸 왜함?
// 함수 뒤에 백틱문자를 붙여 실행하면 그 문자열을 해체분석할 수 있기 때문이다.

var 이름2 = "김이박";

function 해체분석기2(문자들, 변수들) {
    console.log(문자들);
    console.log(변수들);
}

// 이제 이 함수는 백틱 문자열을 이용해서 실행시키면 그 문자열을 해체분석할 수 있다.
// 첫 째 파라미터 "문자들"은 백틱 내의 순수 문자만 골라서 array 로 만들어 놓은 파라미터이다
// 둘 째 파라미터 "변수들"은 백틱 내의 ${} 변수를 담는 파라미터이다 만약 백틱 내에 변수가 2개 이상이라면 파라미터도 맞춰서 추가하면 된다.

// tagged literals 연습문제
var pants = 20;
var socks = 100;
`바지 ${pants} 양말 ${socks}`;
// 바지는 20개, 양말은 100개이다.
// 여기서 문제 -> 양말100 바지20개로 변경하고 싶다면?
function 해체분석기3(문자들, 변수1, 변수2) {
    console.log(문자들[1] + 변수2 + 문자들[0] + 변수1);
}

해체분석기3`바지${pants}양말${socks}`;