// 콜백함수 디자인패턴이 맘에 안드는 사람들은 promise 디자인 패턴을 사용하면 된다.

// promise 생김새 살펴보기
/*
var 프로미스 = new Promise();

프로미스.then(function () {
    // 프로미스가 성공할 경우 실행할 코드
    // then() 을 계속해서 붙여도 된다.
}).catch(function () {
    // 프로미스가 실패할 경우 실행할 코드
}).finally(function () {
    // 마지막에 무조건 실행되는 코드
});
*/

// 이게 전부다.
// new Promise() 문법으로 프로미스라는 변수 오브젝트를 하나 생성하면 Promise 제작 끝이다.
// 이러면 이제 프로미스라는 변수에 then() 을 붙여서 실행 가능하다.
// 프로미스 안의 코드가 실행이 완료 되었을 때 then() 함수 내의 코드를 실행한다.
// 코드 실행이 실패했을 경우 catch() 함수 내의 코드를 실행한다.

// Promise가 콜백함수보다 좋은점
// 1. 콜백함수와는 다르게 순차적으로 뭔가를 실행할 때 코드가 옆으로 길어지지 않는다. then() 함수를 붙여서 순차적으로 실행하기 때문이다.
// 2. 콜백함수는 불가능한 '실패시 특정코드 실행'이 가능하다. -> catch()

// 그러면 성공인지 실패인지 어떻게 구분하는가?
// promise 안에는 아무거나 다 넣을 수 있다.
// 1 + 1 같은 연산이 끝나면 성공판정, 페이지 내의 <button>을 누르면 성공판정 등등
// promise 안에서 성공/실패를 판정하는 방법은 아래와 같다.
var 프로미스 = new Promise(function (성공, 실패) {
    성공();
})

프로미스.then(function () {

}).catch(function () {

});

// 프로미스 안에 콜백함수를 하나 추가하면 그 안에서 성공/실패 판정을 내릴 수 있다.
// 성공() 이라고 첫 번째 파라미터를 함수형태로 작성하면 성공판정이 된다.
// 실패() 라고 둘째 파라미터를 함수형태로 작성하면 실패 판정이 된다.
// 위 코드는 무조건 성공판정을 내리도록 되어있으므로 이후 then() 안의 코드가 실행된다.

// 예시를 알아보자.
// 어려운 연산이 끝나면 특정 코드를 실행시키고 싶다.
// 어려운 연산인 1 + 1 을 해보자
var 프로미스 = new Promise(function (성공, 실패) {
    var 어려운연산 = 1 + 1;
    성공(); // 실패시키고 싶다면 실패()를 호출하면 된다.
});

프로미스.then(function () {
    // 어려운 연산 성공시
    console.log("성공했어요!");
}).catch(function () {
    // 어려운 연산 실패시
    console.log("실패했어요!");
});

// 성공이든, 실패든 그 결과를 이어서 연산하고 싶다면 파라미터로 넘겨주면 된다.
var 프로미스 = new Promise(function (성공, 실패) {
    var 어려운연산 = 1 + 1;
    성공(어려운연산); // 실패시키고 싶다면 실패()를 호출하면 된다.
});

프로미스.then(function (결과) {
    // 어려운 연산 성공시
    console.log(`성공했어요! -> ${결과}`);
}).catch(function (결과) {
    // 어려운 연산 실패시
    console.log(`실패했어요! -> ${결과}`);
});

// 예시 2
// 1초 후에 성공하는 프로미스를 만들어보자.
var 프로미스 = new Promise(function (성공, 실패) {
    setTimeout(() => {
        성공("1초 후 성공완료");
    }, 1000);
});

프로미스.then(function (결과) {
    // 어려운 연산 성공시
    console.log(`성공했어요! -> ${결과}`);
}).catch(function (결과) {
    // 어려운 연산 실패시
    console.log(`실패했어요! -> ${결과}`);
});